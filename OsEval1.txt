Q1.a)Difference between tight coupling and loose coupling.

Tight coupling means classes and objects are dependent on one another. Loose coupling means reducing the dependencies of a 
class that uses the different class directly.
Tight coupling is not good at the test-ability. But loose coupling improves the test ability.
Tight coupling does not provide the concept of interface. But loose coupling helps us follow the GOF principle of program to
interfaces, not implementations.
In Tight coupling, it is not easy to swap the codes between two classes. But it’s much easier to swap other pieces of
code in loose coupling.
Tight coupling does not have the changing capability. But loose coupling is highly changeable.



b) What is the Difference between High Cohesion and Low Cohesion? Also
provide Examples.

Cohesion refers to how the elements of a module belong together.

Related code should be close to each other to make it highly cohesive. Low cohesion mean that the code that makes up some functionality 
is spread out all over your code-base.
Easy to maintain code usually has high cohesion. In low cohesion not only is it hard to discover what code is related to your module, 
it is also difficult to jump between different modules and keep track of all the code in your head.
In High Cohesion the elements within the module are directly related to the functionality that module is meant to provide. In low choesion the elements 
within the module are not directly related to the functionality that module.
By keeping high cohesion within our code, we end up trying DRY code and reduce duplication of knowledge in our modules. 
We can easily design, write, and test our code since the code for a module is all located together and works together.
High cohesion have a class that does a well-defined job. Low cohesion have class that does a lot of jobs that don’t have much in common.
High cohesion gives us better-maintaining facility and Low cohesion results in monolithic classes that are difficult to maintain, 
understand and reduce re-usability.

Suppose we have a class that adds two numbers, but the same class creates a pop-up window displaying the result. This is an
example of a low cohesive class because the window and the addition operation don’t have much in common. 
To make it highly cohesive, we will create a class Display and a class Add. The Display will call Add's method to get the result and
display it.

//Code
Class Add 
{

int a = 123;
int b = 321;

	public int addition(int a, int b)
	{
		this.a = a;
		this.b = b;
		return a * b;
	}

}

class Display 
{
public static void main(String[] args)
{
Add add1 = new Add();
System.out.println(add1.addition(123, 321));
}


----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------




Q2 a) Explain DRY principle and how can we achieve it

DRY stand for "Don't Repeat Yourself," a basic principle of software development aimed at reducing repetition.
"Every piece of knowledge or logic must have a single, unambiguous representation within a system."

How to Achieve DRY:
To Achieve DRY principle, we divide our system into smaller pieces. ie: Divide our code and logic into smaller reusable units and use
that code by calling it where we want. Avoid writing long methods,and divide logic and try to use the existing piece in your method.




b) Explain the KISS principle with Example.
KISS stads for  Keep It Simple, Stupid. The KISS principle says to keep the code simple and clear, making it easy to understand. 
computers can only understand 0's and 1's But programming languages are for humans to understand. so keep coding simple and straightforward.
Also we must keep our methods small. Each method should never be more than 40-50 lines.Each method should only solve one small problem, not many use cases. 
If you have a lot of conditions in the method, break these out into smaller methods. 
It will not only be easier to read and maintain, but it can help find bugs a lot faster.

Example: If we want to write a programm to print the corresponding day of the week for the number entered by the user between 1 to 7.
we can use switch case which will have more code as we have to write 7 cases and one default case. but smarter way would be using array.
we can play here with index as it starts from 0. we will subtract one from users input and give him the value at that index.


----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------



Q3 What is Pessimistic Locking and Optimistic Locking?

Pessimistic Locking:
When one locks the record for their exclusive use until they have finished with it is known as Pessimistic Locking.
Pessimistic locking has much better integrity than optimistic locking. but we must be careful with the application design to avoid deadlock. 
To use pessimistic locking you need either a direct connection to database or an external transaction ID that can be used 
independently of the connection. After this we open the transaction with the transaction ID and then reconnect using that ID. 
The DBMS maintains the locks and allows us to pick the session back up through the Transaction ID.


Optimistic Locking:
Optimistic Locking is where, we read a record and note the version number(also date, timestamp or hashes can be used) 
and check wether the version is changed or not before writing the record back. 
When we write the record back ywe have to filter the update on the version to make sure it hasn't been updated between when checked 
the version and write the record to the disk and update the version.

If the record is different version than ours ie:dirty, we will abort the transaction and the user can re-start it.
This strategy is most applicable to high-volume systems and 3 tier architectures where it is not necessary to maintain a connection 
to the database for the session. In this situation the client cannot actually maintain database locks as the connections are taken from a pool
and also we may not be using the same connection from one access to the next.


----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------




Q4. What is a DeadLock ? And what are methods by which we can handle deadLock.
A Deadlock is a situation where each of the process waits for a resource which is being used by some another process. 
In this situation, none of the process gets executed since the resource it needs, is held by some other process which is also
waiting for some other resource. It is Like an infinite loop. it is like two process are waiting for each other forever.

lets say P1,P2,P3 are some process and R1,R2,R3 are resources.
P1 needs R1 to do some task which is being used by P2. P1 stops the process
since it can't complete without R2. P2 also demands for R1 which is being used by some other process say P3.
P2 also stops its execution. P3 also demands for R1 which is being used by P1 therefore P3 also stops its execution.
In this scenario, a cycle is being formed among these three processes. None of the
process is progressing and they are all waiting. The computer becomes unresponsive
since all the processes got blocked

Methods for handling Deadlock:
1. Deadlock Ignorance
In this method,the Operating system assumes that deadlock never occurs. It simply ignores deadlock.
This approach suitable for a single end user system where user uses the system
only for simple tasks like browsing.
In these types of systems, the user has to simply restart the system in the case of
deadlock. eg: Windows, Linux

2. Deadlock prevention
If it is possible to stop one of the four conditions(Mutual Exclusion, hold and wait, No preemption and
circular wait) at any time then the deadlock can never occur in the system.


----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------





Q5. What is a HTTP protocol? Difference between HTTP and HTTPS.
HTTP Stands for "Hypertext Transfer Protocol." HTTP is the protocol used to transfer data over the web. 
It is part of the Internet protocol and defines commands and services used for transmitting webpage data. 
HTTP uses a server-client model. A client, for example, may be a home computer, laptop, or mobile device.
The HTTP server is typically a web host running web server software, such as Apacheor IIS. 
When you access a website, your browser sends a request to the corresponding web server and it responds with an HTTP status code. 
If the URL is valid and the connection is granted, the server will send your browser the webpage and related files.

Some common HTTP status codes include:
200 - successful request 
401 - unauthorized request

URLs that begin with "http://" are accessed over the standard hypertext transfer protocol.
URLs that start with "https://" are accessed over a secure HTTPS connection.
HTTPS uses SSL to encrypt normal HTTP requests and responses, making it safer and more secure.
Secure Sockets Layer (SSL) is a standard security technology for establishing an encrypted link between a server and a client.





